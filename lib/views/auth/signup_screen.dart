import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../providers/user_provider.dart';
import '../../models/user.dart';
import 'package:intl/intl.dart';

class SignupScreen extends StatefulWidget {
  @override
  _SignupScreenState createState() => _SignupScreenState();
}

class _SignupScreenState extends State<SignupScreen> {
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _phoneController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _confirmPasswordController =
      TextEditingController();
  final TextEditingController _dobController = TextEditingController();

  String? _selectedGender;
  final List<String> _genders = ['Male', 'Female', 'Other'];
  bool _isLoading = false;
  String? _errorMessage;

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(1900),
      lastDate: DateTime.now(),
    );
    if (picked != null) {
      setState(() {
        _dobController.text = DateFormat('yyyy-MM-dd').format(picked);
      });
    }
  }

  bool _validateEmail(String email) {
    final RegExp emailRegex = RegExp(r'^[^@]+@[^@]+\.[^@]+');
    return emailRegex.hasMatch(email);
  }

  bool _validatePhone(String phone) {
    final RegExp phoneRegex = RegExp(r'^\d{8}$');
    return phoneRegex.hasMatch(phone);
  }

  bool _validatePassword(String password) {
    final RegExp passwordRegex =
        RegExp(r'^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[\W_]).{8,}$');
    return passwordRegex.hasMatch(password);
  }

  void _signUp() async {
    final userProvider = Provider.of<UserProvider>(context, listen: false);

    String name = _nameController.text.trim();
    String email = _emailController.text.trim();
    String phone = _phoneController.text.trim();
    String password = _passwordController.text;
    String confirmPassword = _confirmPasswordController.text;
    String dob = _dobController.text.trim();
    String? gender = _selectedGender;

    // Validation
    if (name.isEmpty ||
        email.isEmpty ||
        phone.isEmpty ||
        password.isEmpty ||
        dob.isEmpty ||
        gender == null) {
      setState(() => _errorMessage = "All fields are required.");
      return;
    }

    if (!_validateEmail(email)) {
      setState(() => _errorMessage = "Invalid email format.");
      return;
    }

    if (!_validatePhone(phone)) {
      setState(() => _errorMessage = "Phone number must be 8 digits.");
      return;
    }

    if (!_validatePassword(password)) {
      setState(() => _errorMessage =
          "Password must be at least 8 characters long and include an uppercase letter, a lowercase letter, a number, and a special character.");
      return;
    }

    if (password != confirmPassword) {
      setState(() => _errorMessage = "Passwords do not match.");
      return;
    }

    // Age validation
    DateTime birthDate = DateFormat('yyyy-MM-dd').parse(dob);
    int age = DateTime.now().year - birthDate.year;
    if (DateTime.now().month < birthDate.month ||
        (DateTime.now().month == birthDate.month &&
            DateTime.now().day < birthDate.day)) {
      age--;
    }

    if (age < 15) {
      setState(() => _errorMessage = "You must be at least 15 years old.");
      return;
    }

    // Create User
    User newUser = User(
      id: 0, // Auto-generated by DB
      name: name,
      email: email,
      phoneNumber: phone,
      password: password, // Will be hashed before saving
      gender: gender,
      dateOfBirth: dob,
    );

    setState(() => _isLoading = true);
    bool success = await userProvider.register(newUser);
    setState(() => _isLoading = false);

    if (success) {
      Navigator.pop(context); // Navigate back after success
    } else {
      setState(() => _errorMessage = "Failed to register. Try again.");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Sign Up")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
                controller: _nameController,
                decoration: InputDecoration(labelText: "Name")),
            TextField(
                controller: _emailController,
                decoration: InputDecoration(labelText: "Email")),
            TextField(
                controller: _phoneController,
                decoration: InputDecoration(labelText: "Phone")),
            DropdownButtonFormField<String>(
              value: _selectedGender,
              items: _genders
                  .map((g) => DropdownMenuItem(value: g, child: Text(g)))
                  .toList(),
              onChanged: (value) => setState(() => _selectedGender = value),
              decoration: InputDecoration(labelText: "Gender"),
            ),
            TextField(
                controller: _dobController,
                decoration:
                    InputDecoration(labelText: "Date of Birth (YYYY-MM-DD)"),
                onTap: () => _selectDate(context),
                readOnly: true),
            TextField(
                controller: _passwordController,
                decoration: InputDecoration(labelText: "Password"),
                obscureText: true),
            TextField(
                controller: _confirmPasswordController,
                decoration: InputDecoration(labelText: "Confirm Password"),
                obscureText: true),
            if (_errorMessage != null)
              Text(_errorMessage!, style: TextStyle(color: Colors.red)),
            ElevatedButton(onPressed: _signUp, child: Text("Sign Up")),
          ],
        ),
      ),
    );
  }
}
